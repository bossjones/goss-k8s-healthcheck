apiVersion: v1
kind: Namespace
metadata:
  name: goss

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: goss-readonly-clusterrole
rules:
- apiGroups: [""]
  resources:
    - nodes
    - pods
    - componentstatuses
    - namespaces
    - services
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["*"]
  verbs: ["get", "watch", "list"]

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: goss-readonly-serviceaccount
  namespace: goss

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: goss-readonly-clusterrolebinding
subjects:
- kind: ServiceAccount
  name: goss-readonly-serviceaccount
  namespace: goss
roleRef:
  kind: ClusterRole
  name: goss-readonly-clusterrole
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    run: goss
  name: goss
  namespace: goss
spec:
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      run: goss
  template:
    metadata:
      labels:
        run: goss
    spec:
      serviceAccountName: goss-readonly-serviceaccount
      containers:
      - image: td-goss
        imagePullPolicy: Never
        name: goss
        resources: {}
        command: [ "/bin/sh", "-c", "kubectl config set-credentials goss --token=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token) && goss s --format json"]
        workingDir: /gossconfig
        volumeMounts:
        - name: goss-yaml
          mountPath: /gossconfig
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: goss-yaml
          configMap:
            name: goss-configmap
---
apiVersion: v1
kind: Service
metadata:
  labels:
    run: goss
  name: goss
  namespace: goss
spec:
  ports:
  - port: 8080
    protocol: TCP
  selector:
    run: goss
  type: NodePort
